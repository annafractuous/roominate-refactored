continue
Rails.cache.class
Rails.cache.read_entry(cache_key)
exit
params
exit
match.match_connections.find_by(match: user)
user
match.match_connections
inverse
exit
match.match_connections
match
connection
exit
user.viable_users
user
continue
exit
continue
exit
self
inverse
exit
catch off
disable breakpoints
disable-byebug
continue
exit
responses_hash
continue
responses_hash
continue
responses_hash
exit
responses_hash
exit
responses_hash
exit
category_scores
exit
responses_by_category.class
typeof responses_by_category
scores
responses
category
responses_by_category
scores
exit
responses
continue
compatibility_score
exit
0/0
weigh_responses(user_answers, match_answers)
match_answers
user_answers
exit
category_compatibility_scores
user_answers
compatibility_score
exit
continue
exit
category_compatibility_scores
exit
category_compatibility_scores
exit
points_earned
user_answers
total_possible_points
exit
answer[:desired_answer].include?(match_answers[question_id])
answer[:desired_answer]
answer.keys
answer
answer[desired_answer]
answer.desired_answer
answer.desired_answer.include?(match_answers[question_id])
answer = user_answers[question_id]
question_id = 1
match_answers
user_answers
exit
match_answers[question_id]
match_answers[question_id][answer]
match_answers[question_id].answer
question_id = 1
match_answers
user_answers
exit
answers.length
answers
exit
user.answers.create(question_id: 1, category_id: 1, answer: rand(3..5), desired_answer: [3,4,5], importance: rand(2..4))
user
continue
u
u.answers.create(question_id: 1, category_id: 1, answer: rand(3..5), desired_answer: [3,4,5], importance: rand(2..4))
a = Answer.where(user: [34,37])
a = _
Answer.where(user: [34,37])
Answer.all
answers
exit
Answer.all.map { |a| a.category_id }
Answer.all.map { |a| a.user_id }
Answer.all
answers
exit
a[0,3]
a = [1,2,3,4,5,6,6,7]
set.first
continue
set.first
exit
set.first
set.length
set
exit
set.length
set = set.pop(20)
set.length
set = set.pop(20)
set = User.all.to_a
Answer.all.map { |a| a.user_id }
Answer.all.map { |a| a.user }
Answer.where(user: 11)
Answer.where(user_id: 11)
Answer.all
answers
exit
user.answers.create(question_id: 1, answer: rand(3..5), desired_answer: [3,4,5], importance: rand(2..4))
user.answers.build(question_id: 1, answer: rand(3..5), desired_answer: [3,4,5], importance: rand(2..4))
Answer.all
user.answers.build(question_id: 1, answer: rand(3..5), desired_answer: [3,4,5], importance: (2..4))
Answer.all
answers
exit
answers
exit
User.all.length
matches.length
matches
exit
User.where(:birthday => desired_age_range)
User.where(:age => desired_age_range)
User.where(:city => city, :max_rent => 0..max_rent, :gender => desired_genders, :age => desired_age_range)
exit
s
s = _
s = User.where(:max_rent => 0..max_rent, :city => city, :gender => desired_genders)
s.length
s = User.where(:max_rent => 0..max_rent, :city => city)
User.where(:max_rent => 0..max_rent, :city => city)
User.where(:max_rent => 0..max_rent)
s = User.where(:city => city)
s = _
User.where(:city => city)
city
matches
exit
    User.where(:city => city, :max_rent => 0..max_rent, :gender => desired_genders, :age => desired_age_range)
    User.where(:city => city, :max_rent <= max_rent, :gender => desired_genders, :age => desired_age_range    User.where(:city => city, :max_rent => 0..max_rent, :gender => desired_genders, :age => desired_age_range))
    User.where(:city => city, :max_rent <= max_rent, :gender => desired_genders, :age => desired_age_range)
    User.where(:city => city, :max_rent < max_rent, :gender => desired_genders, :age => desired_age_range)
    desired_age_range = Date.today - user.desired_max_age.years..Date.today - user.desired_min_age.years
    desired_age_range = (Date.today - user.desired_max_age.years, Date.today - user.desired_min_age.years)
    desired_genders = user.desired_gender == "Any" ? ["M", "F", "Other"] : Array(user.desired_gender)
    max_rent = user.max_rent + 50
    city = user.city
user
User.where(desired_gender: ["M", "F"])
User.where(desired_gender: ["M, "F"])
User.where(desired_gender: ["M, "F])
user.birthday.between?(Date.today - user.desired_max_age.years, Date.today - user.desired_min_age.years)
user.birthday.between?(Date.today - user.desired_min_age.years, Date.today - user.desired_max_age.years)
    (Date.today - user.desired_min_age.years)..(Date.today - user.desired_max_age.years).cover?(user.birthday)
    (Date.today - user.desired_min_age.years)..(Date.today - user.desired_max_age.years).include?(user.birthday)
user.birthday
    (Date.today - user.desired_min_age.years)..(Date.today - user.desired_max_age.years)
    (Date.today - desired_min_age.years)..(Date.today - desired_max_age.years)
(Date.today - user.desired_min_age.years)
(Date.today - user.desired_min_age.years).to_i
(Date.today - user.birthday).to_i/365
(Date.today - user.birthday).years
Date.today
(Date.today - user.birthday)
Date.now - user.birthday
Time.now - user.birthday
user.birthday.years
user.birthday
desired_age
desired_gender
max_rent
city
